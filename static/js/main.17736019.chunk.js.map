{"version":3,"sources":["About.js","Home.js","Service.js","App.js","serviceWorker.js","index.js"],"names":["About","React","Component","Home","Service","App","class","href","className","to","type","data-toggle","data-target","id","role","data-dismiss","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAiBeA,E,uKAVf,OAEC,0C,GANmBC,IAAMC,WCcXC,E,uKAVf,OAEC,yC,GANkBF,IAAMC,WCcVE,E,uKAVf,OAEC,4C,GANqBH,IAAMC,W,eCwFbG,G,6KAzEX,OACE,6BACE,kBAAC,IAAD,KAEJ,6BACJ,yBAAKC,MAAM,yBACT,yBAAKA,MAAM,mBACT,yBAAKA,MAAM,iBACT,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,aAEF,wBAAID,MAAM,kBAET,wBAAIE,UAAU,WAAW,kBAAC,IAAD,CAAOC,GAAG,KAAV,SACxB,wBAAID,UAAU,WAAW,kBAAC,IAAD,CAAOC,GAAG,UAAV,UACxB,wBAAID,UAAU,WAAW,kBAAC,IAAD,CAAOC,GAAG,YAAV,YAC/B,wBAAID,UAAU,WACd,4BAAQE,KAAK,SAASJ,MAAM,sBAAsBK,cAAY,QAAQC,cAAY,YAAlF,aASD,yBAAKC,GAAG,UAAUP,MAAM,aAAaQ,KAAK,UACxC,yBAAKR,MAAM,gBAGT,yBAAKA,MAAM,iBACT,yBAAKA,MAAM,gBACT,4BAAQI,KAAK,SAASJ,MAAM,QAAQS,eAAa,SAAjD,QACA,wBAAIT,MAAM,eAAV,iBAEF,yBAAKA,MAAM,cACT,uDAEF,yBAAKA,MAAM,gBACT,4BAAQI,KAAK,SAASJ,MAAM,kBAAkBS,eAAa,SAA3D,aAQA,kBAAC,IAAD,KAIG,kBAAC,IAAD,CAAOC,KAAK,UACX,kBAAC,EAAD,OAGD,kBAAC,IAAD,CAAOA,KAAK,YACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,KACX,kBAAC,EAAD,e,GA9DMf,IAAMC,YCFJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17736019.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\n\r\nclass About extends React.Component{\r\n\r\n\r\nrender(){\r\nreturn(\r\n\r\n <div>\r\n about\r\n  </div>\r\n\r\n\t)\r\n}\r\n\r\n}\r\nexport default About;","import React from 'react';\r\nimport {Component} from 'react';\r\n\r\nclass Home extends React.Component{\r\n\r\n\r\nrender(){\r\nreturn(\r\n\r\n <div>\r\n home\r\n  </div>\r\n\r\n\t)\r\n}\r\n\r\n}\r\nexport default Home;","import React from 'react';\r\nimport {Component} from 'react';\r\n\r\nclass Service extends React.Component{\r\n\r\n\r\nrender(){\r\nreturn(\r\n\r\n <div>\r\n service\r\n  </div>\r\n\r\n\t)\r\n}\r\n\r\n}\r\nexport default Service;","import React from 'react';\nimport About from './About';\nimport Home from './Home';\nimport Service from './Service';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink\n} from \"react-router-dom\";\n\nimport './App.css';\n\nclass App extends React.Component {\n\n \n  render() {\n    return (\n      <div>\n        <Router>\n    \n    <div>\n<nav class=\"navbar navbar-inverse\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\" href=\"#\">JEET1APP</a>\n    </div>\n    <ul class=\"nav navbar-nav\">\n      \n     <li className=\"activer\" ><Link  to=\"/\" >Home</Link></li> \n      <li className=\"activer\" ><Link  to=\"/about\" >ABOUT</Link></li> \n       <li className=\"activer\" ><Link  to=\"/service\" >SERVICE</Link></li> \n <li className=\"activer\" >\n <button type=\"button\" class=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\">Login</button>\n </li> \n\n\n \n    </ul>\n  </div>\n</nav>\n\n<div id=\"myModal\" class=\"modal fade\" role=\"dialog\">\n  <div class=\"modal-dialog\">\n\n\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n        <h4 class=\"modal-title\">Modal Header</h4>\n      </div>\n      <div class=\"modal-body\">\n        <p>Some text in the modal.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n      </div>\n    </div>\n\n  </div>\n</div>\n\n    \n        <Switch>\n        \n\n           \n           <Route path=\"/about\">\n            <About />\n          </Route>\n\n           <Route path=\"/service\">\n            <Service />\n          </Route>\n           <Route path=\"/\">\n            <Home />\n          </Route>\n\n        \n        \n        </Switch>\n      </div>\n    </Router>\n\n       </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}